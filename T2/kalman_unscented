% Filtro de Kalman extendido
clear all;close all;clc;

% Inicialização de Parâmetros
t = 1; i = 10^4;
d = 1; c = 0.5;

n = 1;
lambda = 1;
gama = 1;
alfa = 0.5;
beta = 0.5;

mi(:,:) = zeros(3,n);
sigma(:,:,:) = zeros(3,3,n);
x(:,:) = zeros(3,n);
Xr(:,:) = zeros(3,n);
z(:,:) = zeros(3,n);
Zr(:,:) = zeros(3,n);
u(:,:) = zeros(2,n);
K(:,:,:) = zeros(3,3,n);
H = eye(3);

%% Kalman estendido

while(t<i)
    t=t+1;
    

    wm0 = lambda/(n+lambda);
    wc0 = wm0 + (1-(alfa^2)+beta);

    wc1 = 1/(2*(n+lambda));
    wc2 = wc1;
    wm1 = wc1;
    wm2 = wc1;
    
    auxsqrt = sqrt((n+lambda)*sigma(:,:,t-1));
    
    u(:,t) = [1;0];
    g(:,:)=[1 0 -d*sin(mi(3,t-1))*u(1,t); 0 1 d*cos(mi(3,(t-1)))*u(1,t);0 0 1];
    
    s0 = mi(:,t-1);
    s1 = mi(:,t-1) + auxsqrt(1,:)';
    s2 = mi(:,t-1) - auxsqrt(2,:)';

%     psi0 = g( s0, u(t) );
%     psi1 = g( s1, u(t) );
%     psi2 = g( s2, u(t) );

    %predicao

%     mi_aux= (psi0*wm0) + (psi1*wm1) + (psi2*wm2);
%     sigma_aux= 	wc0*(psi0-mi)*transpose(psi0-mi) + wc1*(psi1-mi)*transpose(psi1-mi) + wc2*(psi2-mi)*transpose(psi2-mi);

    M = [0.01 0 0;0 0.01 0;0 0 0.1*pi/180];  % Ruido do sinal de controle
    Q = [0.01 0 0;0 0.01 0;0 0 0.1*pi/180];  % Ruido da medida

    %% Conferir a partir desse ponto!!!
    [lin,~] = size(mi);  % Quero pegar daqui quantas linhas tem mi ( o numero de estados)
    mi_a = [transpose(mi(:,t-1)) zeros(1,lin) zeros(1,lin)];
    sigma_a = [sigma(:,:,t-1) zeros(lin,lin) zeros(lin,lin);zeros(lin,lin) M zeros(lin,lin);zeros(lin,lin) zeros(lin,lin) Q];

    s_a(:,:) = [s0 s1 s2];
    s_x_b(:,:) = g(s_a(1:3)', s_a(4:6)');
    mib(:,:) = sum(wmi*s_x_b(1:3));
    sigmab(:,:) = sum(wci*(s_x_b(:,i,t)-mib(t))*transpose(s_x_b(:,i,t)-mib(t));

    %correcao
    Zb(t)= h(s_x_b(t),s_a(3,t-1))
    mi_Zb(t)=sum(wmi*Zb(i,t))
    sigma_Zb(t)=sum(wci*(Zb(i,t)-mi_Zb(t))*transpose(Zb(i,t)-mi_Zb(t)))
    cov_Zb(t)= sum(wci*(s_x_b(:,i,t)-mib(t))*transpose(Zb(i,t)-mi_Zb(t)))
    K(t)=cov_Zb(t)*inv(sigma_Zb(t));

    mi(t)= mib(t) + K(t)*(z(t)-mi_Zb(t))
    sigma= sigmab(t) - K(t)*sigma_Zb(t)*transpose(K(t))
    
    
end

